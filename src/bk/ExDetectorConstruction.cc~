//
// ********************************************************************
// * DISCLAIMER                                                       *
// *                                                                  *
// * The following disclaimer summarizes all the specific disclaimers *
// * of contributors to this software. The specific disclaimers,which *
// * govern, are listed with their locations in:                      *
// *   http://cern.ch/geant4/license                                  *
// *                                                                  *
// * Neither the authors of this software system, nor their employing *
// * institutes,nor the agencies providing financial support for this *
// * work  make  any representation or  warranty, express or implied, *
// * regarding  this  software system or assume any liability for its *
// * use.                                                             *
// *                                                                  *
// * This  code  implementation is the  intellectual property  of the *
// * GEANT4 collaboration.                                            *
// * By copying,  distributing  or modifying the Program (or any work *
// * based  on  the Program)  you indicate  your  acceptance of  this *
// * statement, and all its terms.                                    *
// ********************************************************************
//
//
// $Id: ExDetectorConstruction.cc,v 1.8 2003/10/06 08:59:11 maire Exp $
// GEANT4 tag $Name: geant4-07-01 $
//

#include "ExDetectorConstruction.hh"
#include "ExTrackerSD.hh"

#include "G4Material.hh"
#include "G4Box.hh"
#include "G4Tubs.hh"
#include "G4LogicalVolume.hh"
#include "G4ThreeVector.hh"
#include "G4PVPlacement.hh"
#include "G4SDManager.hh"
#include "G4AssemblyVolume.hh"


#include "ExGlobalParameters.hh"
#include "globals.hh"


//#include "G4EqMagElectricField.hh"
//#include "G4UniformElectricField.hh"

ExDetectorConstruction::ExDetectorConstruction()
 :  experimentalHall_log(0), CZTDet_log(0), CZTDead_log(0),
    experimentalHall_phys(0), CZTDet_phys(0), CZTDead_phys(0)
{;}

ExDetectorConstruction::~ExDetectorConstruction()
{
}

G4VPhysicalVolume* ExDetectorConstruction::Construct()
{

  //------------------------------------------------------ materials

  G4String symbol;             //a=mass of a mole;
  G4double a, z, density;      //z=mean number of protons;  
  G4int iz, n;                 //iz=number of protons  in an isotope; 
                             // n=number of nucleons in an isotope;
  G4int ncomponents, natoms;
  G4double abundance, fractionmass;

/*  G4Material* Ar = 
  new G4Material("ArgonGas", z= 18., a= 39.95*g/mole, density= 1.782*mg/cm3);

  G4Material* Al = 
  new G4Material("Aluminum", z= 13., a= 26.98*g/mole, density= 2.7*g/cm3);*/

  G4Material* Pb = 
  new G4Material("Lead", z= 82., a= 207.19*g/mole, density= 11.35*g/cm3);

  G4Material* W =
  new G4Material("Tungsten", z= 74., a= 183.84*g/mole, density= 19.25*g/cm3);

  G4Element* N  = new G4Element("Nitrogen",symbol="N" , z= 7., a= 14.01*g/mole);
  G4Element* O  = new G4Element("Oxygen"  ,symbol="O" , z= 8., a= 16.00*g/mole);
  G4Element* H  = new G4Element("Hydrogen",symbol="H" , z= 1., a= 1.01*g/mole);

  G4Material* Air = 
	  new G4Material("Air"  , density= 1.290*mg/cm3, ncomponents=2);
  Air->AddElement(N, fractionmass=0.7);
  Air->AddElement(O, fractionmass=0.3);

  G4Material* H2O = 
	  new G4Material("Water", density= 1.000*g/cm3, ncomponents=2);
  H2O->AddElement(H, natoms=2);
  H2O->AddElement(O, natoms=1);

  G4Material* Vacuum = new G4Material("Galactic", z=1., a=1.01*g/mole,density= universe_mean_density,
                           kStateGas, 3.e-18*pascal, 2.73*kelvin);

  //G4Material* Cd = new G4Material("Cd", z=48., a=112.411*g/mole, density=8.65*g/cm3);
  //G4Material* Zn = new G4Material("Zn", z=30., a=65.39*g/mole, density=7.13*g/cm3);
  //G4Material* Te = new G4Material("Te", z=52., a=127.6*g/mole, density=6.24*g/cm3);
  G4Element* Cd = new G4Element("Cadmium", symbol="Cd", z=48., a=112.411*g/mole);
  G4Element* Zn = new G4Element("Zinc", symbol="Zn", z=30., a=65.39*g/mole);
  G4Element* Te = new G4Element("Tellurium", symbol="Te", z=52., a=127.6*g/mole);

  G4Material* CZT =
	  new G4Material("CZT", density=5.78*g/cm3, ncomponents=3);
  CZT->AddElement(Cd, natoms=90);
  CZT->AddElement(Zn, natoms=10);
  CZT->AddElement(Te, natoms=100);

  G4Element* Hg = new G4Element("Mercury", symbol="Hg", z=80., a=200.59*g/mole);
  G4Element* I = new G4Element("Iodine", symbol="I", z=53., a=126.90447*g/mole);

  G4Material* HgI2 =
	  new G4Material("HgI2", density=6.4*g/cm3, ncomponents=2);
  HgI2->AddElement(Hg, natoms=1);
  HgI2->AddElement(I, natoms=2);


  //------------------------------------------------------ volumes

  //------------------------------ experimental hall (world volume)

  G4double expHall_x = 30.0*cm;
  G4double expHall_y = 30.0*cm;
  G4double expHall_z = 30.0*cm;
  G4Box* experimentalHall_box
    = new G4Box("expHall_box",expHall_x,expHall_y,expHall_z);
  experimentalHall_log = new G4LogicalVolume(experimentalHall_box,
                                             Vacuum,"expHall_log",0,0,0);
  experimentalHall_phys = new G4PVPlacement(0,G4ThreeVector(),
                                      experimentalHall_log,"expHall",0,false,0);

  

  //------------------------------ CZT detector
  G4double det_x = CGlobalParameters::detsizeX;
  G4double det_y = CGlobalParameters::detsizeY;
  G4double det_z = CGlobalParameters::detsizeZ;

  G4double det_dead = CGlobalParameters::detdeadZ;
  det_z -= det_dead;

  G4double detintv_x = CGlobalParameters::detintvX;
  G4double detintv_y = CGlobalParameters::detintvY;
  G4double detintv_z = CGlobalParameters::detintvZ;
  

  G4Box* CZTDet_box = new G4Box("CZTDet_box", det_x, det_y, det_z);
  CZTDet_log = new G4LogicalVolume(CZTDet_box, HgI2,"CZTDet_log",0,0,0);

  CZTDet_phys = new G4PVPlacement(0,G4ThreeVector(0,0,0),
                                      CZTDet_log,"CZTDetector",experimentalHall_log,false,0);

  
  //
  // G4AssemblyVolume
  //
  // Define one layer as one assembly volume
  /* G4AssemblyVolume* assemblyDetector = new G4AssemblyVolume();

   // Rotation and translation of a plate inside the assembly
   G4RotationMatrix * Ra = new G4RotationMatrix();
   G4ThreeVector Ta;


   // Rotation of the assembly inside the world
   G4RotationMatrix * Rm = new G4RotationMatrix();
   G4ThreeVector Tm;

   // Fill the assembly by the Detector

   Ta = G4ThreeVector(0,0,0);
   assemblyDetector->AddPlacedVolume( CZTDet_log, Ta, Ra);
   if ( det_dead != 0 )
   {
		Ta = G4ThreeVector( 0, 0, -(det_dead + det_z) );
		assemblyDetector->AddPlacedVolume( CZTDead_log, Ta, Ra);
   }

   //G4ThreeVector vMatrix = CGlobalParameters::m_detMatrix;
   // geometry change
   for ( int i = 0; i < 1; i++ )
   {
	   for ( int j = 0; j < 1; j++ )
	   {
		   for ( int k = 0; k < 1; k++ )
		   {
		     Tm.setX( detintv_x * i );
		     Tm.setY( detintv_y * j );
		     //Tm.setZ( ( detintv_z + 2 * ( det_z + det_dead ) ) * k );
		     //Tm.setX( detintv_x * i + ( detintv_x + det_x * 2 + detintv_z ) * k ) ;
		     //Tm.setY( detintv_y * j );
		     Tm.setZ( 0 );
		     assemblyDetector->MakeImprint( experimentalHall_log, Tm,Rm );
		   }
	   }
   }*/

  //------------------------------ Collimator

  G4double coll_x = 1 * cm / 2;
  G4double coll_y = 1 * cm / 2;
  G4double coll_z = 9 * cm / 2;
  G4double gap = 0.1*mm;
  G4double distance = 3 * cm;

  G4Box* coll_box = new G4Box("coll_box", coll_x, coll_y, coll_z);
  G4LogicalVolume * coll_log = new G4LogicalVolume(coll_box, W, "coll_box",0,0,0);
  G4PVPlacement * coll_phys1 = new G4PVPlacement(0, G4ThreeVector(gap/2+coll_x ,0,-(distance+det_z+coll_z)), coll_log, "Collimator1", experimentalHall_log,false,0);
  G4PVPlacement * coll_phys2 = new G4PVPlacement(0, G4ThreeVector(-gap/2-coll_x ,0,-(distance+det_z+coll_z)), coll_log, "Collimator2", experimentalHall_log,false,0);


  //------------------------------------------------ 
  // Sensitive detectors
  //------------------------------------------------ 

  G4SDManager* SDman = G4SDManager::GetSDMpointer();

  G4String trackerSDname = "Ex/TrackerSD";
  ExTrackerSD* aTrackerSD = new ExTrackerSD( trackerSDname );
  SDman->AddNewDetector( aTrackerSD );
  CZTDet_log->SetSensitiveDetector( aTrackerSD );

  
  //------------------------------------------------------------------

  return experimentalHall_phys;
}
